const fs = require('fs');
const path = require('path');
function servePage(ersponse,filename = 'index.html') {
const fullPath= path.join(__dirname,'public',filename);
const extension = path.extname(fullPath);
console.log('Extension is ',extension);
if(extension==='.css'){
    response.setHeader('contect-Type','text/css');

}
 else if(extension ==='.mp4'){
    response.setHeader('Constent-Type','video/mp4')

 }
 else{
    response.setHeader('Content-Type','text/html');

 }  
 const readStream = fs.createReadStream(fullPath);
 readStream.pipe(response);

}
function isStaticContent(fileName){
    if(fileName==='/'){
        fileName= 'index.html';
    }
    const staticExt = [".html", ".css",".js",".png",".jpeg", ".mp4"];
    const fullPath=path.join(__dirname,'public',fileName);
    return staticExt.indexOf(extension)>=0;
}
function handleREquestAndResponse(request, response){
    console.log("Here Request Comes.....", request.url);
    const urlString = request.url;
    const method  = request.method;
    if(isStaticContent(urlString)){
        if(urlString ==='/'){
            servePage(response);
        }
        else {
            servePage(response,urlString);

        }
    }
    else if (urlString === '/login'&& method ==='POST'){
        login(request, response);

    }
    else if (urlString.startsWith('login') && method === 'GET'){
        getlogin(request, response);

    }
    else if(urlString == '/big-task'){
        bigTask();
        response.write('Big Task Done....');
        response.end();

    }
    else{
        response.write('OOPS U Type Something Else...');
        response.end();

    }

}
const cluster = require('cluster');
const os = require('os');
if(cluster.isPrimery){//Master process Triger the (child process)
    console.log('Master happens....');
    const cores = os.cpus().length;
    for(let i= 1;i<=cores; i++){
        cluster.fork();

    }
    cluster.on('online',(worker)=>{
        console.log('Worker Online',worker.process.pid);

    });
    cluster.on('exit'(worker)=>{

    })

}
else{
    console.log('Fork Happens....')
    //Piza

    const server = http.createServer(handleRequestAndResponse){
        server.listen(process.env.PORT || 9755 ,err=>{
         if(err){
            console.log(chalk.red.bold('Error During server Up'),err);

         } 
         else{
            figlet('Server UP..',(err,data)=>{
                if(err){
                    console.log('Error in Figlet');

                }
                else{
                    console.log(chalk.green.bold(data));
                    console.log(chalk.yellom.bold('@'+server.address().port));

                }
            })
            //console.log(chalk.green.bold('Server Up and Running '), server.address().port);
         }  
        })
    }